generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



//for user registration

model User {
  id                 Int       @id @default(autoincrement())
  name               String
  password           String
  email              String    @unique
  avatar             String   @default("https://www.kindpng.com/picc/m/24-248253_user-profile-default-image-png-clipart-png-download.png")
  contact            String   @default("")
  address            String   @default("")
  lastFivePasswords  String[] @default([])
  twoFAEnabled       Boolean  @default(false)
  wrongPassCounter   Int      @default(0)
  isPassBlockEnable  Boolean  @default(false)
  refreshToken       String   @default("")
  otp                Int      @default(0)
  createdAt          DateTime  @default(now())

  //relations
  comments Comment[]
  ratings Rating[]
  courses UserCourse[]


}

//user enrolled courses
model UserCourse {
  id          Int      @id @default(autoincrement())
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  course      Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
}


model Product {
  id          Int      @id @default(autoincrement())
  name        String
  price       Float
  description String
}



// for provider register and login

model Provider {
  id                Int       @id @default(autoincrement())
  name              String
  password          String   @default("")
  email             String    @unique
  avatar            String   @default("")
  contact           String   
  address           String

  providerType      String   

  documentImage    String 
  documentImageId  String  


  verified          Boolean  @default(false)
  status            String   @default("pending")
  createdAt         DateTime  @default(now())
  lastFivePasswords String[] @default([])
  twoFAEnabled      Boolean  @default(false)
  wrongPassCounter  Int      @default(0)
  isPassBlockEnable Boolean  @default(false)
  isFirstLogin      Boolean  @default(true)
  refreshToken      String   @default("")
  otp               Int      @default(0)

  //relations
  courses Course[]

}



// for super user
model Superuser {
  id                 Int       @id @default(autoincrement())
  name               String
  password           String
  email              String    @unique
  avatar             String   @default("https://www.kindpng.com/picc/m/24-248253_user-profile-default-image-png-clipart-png-download.png")
  contact            String   @default("")
  lastFivePasswords  String[] @default([])
  twoFAEnabled       Boolean  @default(false)
  wrongPassCounter   Int      @default(0)
  isPassBlockEnable  Boolean  @default(false)
  refreshToken       String   @default("")
  otp                Int      @default(0)
  createdAt          DateTime  @default(now())
}



// for new course

model Course {
  id          Int      @id @default(autoincrement())
  title        String
  description String
  isPaid       Boolean
  instructor   String
  duration     String
  thumbnail    String
  courseLevel  String
  Language     String[]
  price       Float
  provider    Provider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  providerId  Int


  views       Int      @default(0)
  rating      Float    @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  
  enrolled    Int      @default(0)




  //relations
  topics Topic[]
  users UserCourse[]
  
}


// topic for courses

model Topic {
  id          Int      @id @default(autoincrement())
  topicName        String
  description String
  course      Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId     Int
  instructor  String
  learningOutcomes String[]

  //relations
  contents Contents[]
  
}


// videos for topics

model Contents {
  id          Int      @id @default(autoincrement())
  title        String
  description String

  topic      Topic @relation(fields: [topicId], references: [id], onDelete: Cascade)
  topicId     Int

  videoUrl    String

  views       Int      @default(0)
  likes       Int      @default(0)

  comments    Comment[]
  rating      Rating[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())



}



//comments  and ratings
model Comment {
  id          Int      @id @default(autoincrement())
  comment     String
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  content     Contents @relation(fields: [contentId], references: [id], onDelete: Cascade)
  contentId   Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
}

model Rating {
  id          Int      @id @default(autoincrement())
  rating      Int
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  content     Contents @relation(fields: [contentId], references: [id], onDelete: Cascade)
  contentId   Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
}
  